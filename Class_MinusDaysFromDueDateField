/**
 * JOB: Recalculate # days remaining. 
 * JQL query for all tickets in project where current SLA == Started, Not stopped, not paused. 
 * Then, minus 1 working day from that due date for all tickets.
 */

import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.event.type.EventDispatchOption
import com.atlassian.jira.issue.ModifiedValue
import com.atlassian.jira.issue.Issue
import com.atlassian.jira.issue.fields.CustomField
import com.atlassian.jira.issue.CustomFieldManager
import com.atlassian.jira.user.ApplicationUser

import com.atlassian.jira.plugins.workinghours.api.calendar.CalendarService
import com.onresolve.scriptrunner.runner.customisers.PluginModule
import com.onresolve.scriptrunner.runner.customisers.WithPlugin

import groovy.util.logging.Log4j

import java.time.ZoneId
import static java.time.DayOfWeek.*
import java.time.DayOfWeek
import java.time.LocalDate
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import java.time.temporal.ChronoUnit
import java.sql.Timestamp

@WithPlugin("com.atlassian.servicedesk")

@Log4j
class MinusDueDateField {   
    @PluginModule
    CalendarService slaCalendarService
    //Name of the calendar where bank holidays will be included
    final String ukHolidayCalendar = 'UU Business Days'
    
    final List<String> startStatus = ['Waiting for support']
    final List<String> pauseStatus = ['In progress', 'Pending', 'Escalated']
    final List<String> stopStatus = ['Waiting for customer', 'Resolved', 'Closed', 'Canceled' ]
    
    
    //Date formats used in the scripts
    final String slaDueDateShowFormat = 'dd/MMM/yy'
    final String changeItemDateFormat = 'yyyy-MM-dd'
    
    
    /**
     * Minus one working day from SLA Due Date field, using the 
     * @param issue , Issue to update the custom field value
     * @param slaDurationInDays , The number of day to be deducted as Integer
     */
    String minusSlaDueDate(Issue issue, String customFieldName, Integer slaDurationInDays) {
        
        //// SLA Due Date field ID
        final String slaDueDateName = customFieldName
        def slaDueDateField = getCustomFieldByName(slaDueDateName) //ComponentAccessor.customFieldManager.getCustomFieldObjectsByName(slaDueDateName)
        log.warn "Custom Field Name ===== ${slaDueDateField}"
        def slaDueDate = getCustomFieldValueByName(slaDueDateName, issue) as Date //issue.getCustomFieldValue(slaDueDateField) as Date
        log.warn "slaDueDate >> ${slaDueDate}"
        
        
        def dayOfWeek = slaDueDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate().dayOfWeek
        log.warn "dayOfWeek >> ${dayOfWeek}"

        //// Minus 1 WORKING DAY from the SLA Due Date
        //def numOfDay = slaDurationInDays

        //// If the SLA Due Date is on Monday, then minus 3 including the weekends (Saturday and Sunday)
        //if (dayOfWeek in [MONDAY]) { 
            //slaDurationInDays = 3            
        //}
        def remainingDate = slaDueDate - slaDurationInDays
        log.warn "remainingDate >> ${remainingDate}"
        
        def date = remainingDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate()
        def value = getMinusBusinessDay(date)
        log.warn "Final Date to be saved >> ${value}"
        
        // Convert time.LocalDate to Util.Date
        remainingDate = java.util.Date.from(value.atStartOfDay().atZone(ZoneId.systemDefault()).toInstant())
        setSlaDueDate(slaDueDateName, remainingDate.toTimestamp(), issue)
    }
    
    
    /**
     * Set a value to the SLA Due Date field, using the name
     * @param customFieldName , Name of custom field to lookup
     * @param value , The new value of SLA Due Date as date
     * @param issue , Issue to update the custom field value
     */
    void setSlaDueDate(String customFieldName, Timestamp value, Issue issue) {
        if (customFieldName && issue) {
            CustomField customField = getCustomFieldByName(customFieldName)
            String previousValue = issue?.getCustomFieldValue(customField)
            
            Issue reloadIssue = ComponentAccessor.issueManager.getIssueByCurrentKey(issue.key)
            
            if (customField && (previousValue != value)) {
                //issue.setCustomFieldValue(customField, value)
                //ComponentAccessor.issueManager.updateIssue(ComponentAccessor.jiraAuthenticationContext.loggedInUser, issue, EventDispatchOption.DO_NOT_DISPATCH, false)

                reloadIssue.setCustomFieldValue(customField, value)
                ComponentAccessor.issueManager.updateIssue(ComponentAccessor.jiraAuthenticationContext.loggedInUser, reloadIssue, EventDispatchOption.DO_NOT_DISPATCH, false)
                log.warn "==== Successfully Set SLA Due Date field: ${value} (${(value.toInstant().atZone(ZoneId.systemDefault()).toLocalDate().dayOfWeek)})!"
            }
        }

    }
    
    /**
     * Add the business duration days to the date received, checking to add extra days when is weekend or holidays
     * @param dateOrigin , date to add duration of SLA
     * @param durationInDays , days of duration of SLA
     * @return ,a LocalDate object with the new date
     */
    LocalDate getMinusBusinessDay(LocalDate dateOrigin) {
        LocalDate resultDate = dateOrigin
        List holidays = getHolidays()
        boolean businessDayEncountered = false
        while (!businessDayEncountered) {
            if (!isHoliday(holidays, resultDate) && !isWeekend(resultDate)) {
                businessDayEncountered = true
            } else {
                //resultDate = resultDate.plusDays(1)
                resultDate = resultDate.minusDays(1)
            }
        }
        log.warn "getMinusBusinessDay resultDate >> ${resultDate}"
        resultDate
    }
    
    
    // =================================================================================================================================== //   
    // Below lines are copied from https://stash.adaptavist.com/projects/SRS/repos/scripting-service/browse/UUScripts/SLA/SLAUtils.groovy  //
    // =================================================================================================================================== //
    

    /**
     * Check if a date is holiday based on holidays list
     * @param holidays , list of holidays in a year
     * @param date , date to check
     * @return true if is holiday otherwise return false
     */
    boolean isHoliday(List holidays, LocalDate date) {
        //ApplicationUser user = ComponentAccessor.jiraAuthenticationContext.loggedInUser
        //def ukCalendar = slaCalendarService.getAll(user).find { it.name == ukHolidayCalendar }
        //ukCalendar?.holidays?.any { it.date.toString() == date?.toString() }
        holidays?.any { it.date.toString() == date?.toString() }
    }

    /**
     * Check if a date is weekend
     * @param date , date to check
     * @return true if is weekend otherwise return false
     */
    boolean isWeekend(LocalDate date) {
        date?.dayOfWeek in [DayOfWeek.SATURDAY, DayOfWeek.SUNDAY]
    }
    
    /**
     * Get a list of holidays in the year for the calendar name given
     * @return ,a list of all holidays in the calendar
     */
    List getHolidays() {
        ApplicationUser user = ComponentAccessor.jiraAuthenticationContext.loggedInUser
        def ukCalendar = slaCalendarService.getAll(user).find { it.name == ukHolidayCalendar }
        ukCalendar?.holidays

    }
    
    /**
     * Get a CustomField object by name
     * @param customFieldName , Name of custom field to lookup
     * @return A CustomField object with information about the custom field
     */
    CustomField getCustomFieldByName(String customFieldName) {
        CustomFieldManager customFieldManager = ComponentAccessor.customFieldManager
        Collection<CustomField> customFields = customFieldManager.getCustomFieldObjectsByName(customFieldName)
        customFields?.size() > 0 ? customFields.first() : null
    }
    

    /**
     * Get the value of a custom field finding by name
     * @param customFieldName , Name of custom field to lookup
     * @return the value of custom field as Object
     */
    Object getCustomFieldValueByName(String customFieldName, Issue issue) {
        CustomField customField = getCustomFieldByName(customFieldName)
        customField ? issue?.getCustomFieldValue(customField) : null
    }
    
}
